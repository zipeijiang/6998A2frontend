var checkout = {};
var sessionAttributes = {
  "userId": "uninitialized",
};

function ApiSearch(message) {
  // params, body, additionalParams
  console.log("Search: ", message)
  var params = {
    "q": message
  }
  return sdk.searchGet(params, {}, {});
}

function update_images(images) {
  $("#pic-area").empty()
  images.forEach(element => {
    var picture_holder = $("<div class='col-4'>")
    var picture = $("<img alt='picture'>")
    picture.attr('src', element)
    picture_holder.append(picture)
    $("#pic-area").append(picture_holder)
  });
}

function process_message() {
  var text = $("#input-buffer").val()
  $("#input-buffer").val("")
  ApiSearch(text).then((response) => {
    console.log("Response: ", response)
    var images = response.data.body.image_paths
    update_images(images)
  })
  .catch((error) => {
    console.log("Error: ", error)
    $("#input-warning").html("search failed, try again")
  })
}

function register_voice_btn() {
  $("#voice-btn").unbind('click');
  $("#voice-btn").click(function () {
    console.log("Start Clicked")
    startDictation()
  })
  $("#voice-btn").html("Start Voice")
}

function register_stop_btn (recg) {
  $("#voice-btn").unbind('click');
  $("#voice-btn").click(function () {
    recg.stop()
    console.log("Stop Clicked")
    register_voice_btn()
  })
  $("#voice-btn").html("Stop Voice")
}

function startDictation() {
  if (window.hasOwnProperty('webkitSpeechRecognition')) {
    var recognition = new webkitSpeechRecognition();

    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'en-US';
    register_stop_btn(recognition)
    recognition.start();

    recognition.onresult = function (e) {
      $("#input-buffer").val(e.results[0][0].transcript)
      recognition.stop();
      register_voice_btn()
    };
    recognition.onerror = function (e) {
      recognition.stop();
      // register_voice_btn()
    };
  }
}

function callChatbotApi(message) {
  // params, body, additionalParams
  return sdk.chatbotPost({}, {
    "messages": [{
      type: 'unstructured',
      unstructured: {
        text: message
      }
    }],
    "sessionAttributes": sessionAttributes
  }, {});
}

function getBase64(file) {
  var reader = new FileReader();
  reader.readAsDataURL(file);
  reader.onload = function () {
    console.log(reader.result);
  };
  reader.onerror = function (error) {
    console.log('Error: ', error);
  };
}

function imge_type(key) {
  if (key.includes('jpeg')) {
    return "image/jpeg"
  } else if (key.includes('png')) {
    return "image/png"
  }
}

function uploadAPI(file, custome_labels) {
  return sdk.uploadPut({
    "object": file.name,
    "folder": "photo-s3-chenli",
  }, file, {
    "headers": {
      "Content-Type": imge_type(file.name),
      "x-amz-meta-customLabels": custome_labels
    }
  })
}

function upload_image(file, custome_labels) {
  uploadAPI(file, custome_labels).then((response) => {
    console.log("Upload Success: ", response)
  })
  .catch((error) => {
    console.log("Upload Failed: ", error)
  })
}

$(document).ready(function () {

  $(window).on('keydown', function (e) {
    if (e.which == 13) {
      process_message();
      $("#input-warning").html("")
      return false;
    }
  })

  $("#search-btn").click(function () {
    process_message();
    $("#input-warning").html("")
  })

  register_voice_btn()

  /*      // I have problem read image file body using autogenerated SDK, use axios instead
  $("#upload-btn").click(function () {
    var file = $("#customFile").prop('files')[0]
    var custome_labels = $("#label-buffer").val().trim()
    upload_image(file, custome_labels)
  })
  */

  $("#upload-btn").click(function () {
    var file = $("#customFile").prop('files')[0]
    var custome_labels = $("#label-buffer").val().trim()
    var key = file.name
    var url = "https://gens1kuin3.execute-api.us-east-1.amazonaws.com/v1/upload" 
    console.log(custome_labels)
    axios.put(url, file, {
      headers: {
        'Content-Type': imge_type(key),
        'x-amz-meta-customLabels': custome_labels
      },
      params: {
        "folder": "cf-photo-s3",
        "object": key
      }
    })
    .then((response) => {
      console.log("Upload Succeed", response)
    })
    .catch((error) => {
      console.log("Upload Failed: ", error)
    })
    
  })
});
